%{

#include <iostream>
#include <stdio.h>
#include <string.h>
#include "example1.h"

#define DEBUG_PARSER 1
  
  int yywrap();
  int yylex();
  void yyerror(const char *str);
  
  NodePtr program(0);
  
%}

%token NUMBER START STOP WORD EOL WS

%%
program : 
commands 
{
#if DEBUG_PARSER == 1
  std::cout << "program : commands=" << $1 << std::endl;
#endif
  program = $1;
}
; /* program */

commands :
/* empty */
{
#if DEBUG_PARSER == 1
  std::cout << "commands: empty" << std::endl;
#endif
  $$ = NodePtr(new ProgramNode());
}
|
commands command
{ 
#if DEBUG_PARSER == 1
  std::cout << "commands: commands=" << $1 << "command=" << $2 << std::endl;
#endif
  $$=$1;
  $$->children.push_back($2);
}
; /* commands */

command :
start_command
{
#if DEBUG_PARSER == 1
  std::cout << "command: start_command=" << $1 << std::endl;
#endif
  $$ = $1;
}
|
stop_command
{
#if DEBUG_PARSER == 1
  std::cout << "command: stop_command=" << $1 << std::endl;
#endif
  $$ = $1;
}
; /* command */

start_command :
optional_ws START WS WORD WS NUMBER optional_ws EOL
{
#if DEBUG_PARSER == 1
  std::cout << "start_command: WORD=" << $4 << " NUMBER=" << $6 << std::endl;
#endif
  $$ = NodePtr(new StartCommandNode($4,$6));  
}
; /* start_command */

stop_command :
optional_ws STOP WS WORD optional_ws EOL
{ 
#if DEBUG_PARSER == 1
  std::cout << "stop_command: WORD=" << $4 << std::endl;
#endif
  $$ = NodePtr(new StopCommandNode($4));
}     
; /* stop_command */

optional_ws :
/* empty */
|
WS
; /* optional_ws */

%%

int yywrap()
{
  return 1;
} 

void yyerror(const char *str)
{
  fprintf(stderr,"error: %s\n",str);
}

int main(int argc, char *argv[])
{
  yyparse();
  if (!! program) {
    program->print(std::cout);
  } else {
    std::cout << "syntax error." << std::endl;
  }
  return 0;
} 
